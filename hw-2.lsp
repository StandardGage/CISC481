(defun middle_elt (a b c)
    (if (< a b)
        (if (< b c)
            b
            (if (< a c)
                c
                a))
        (if (< c b)
            b
            (if (< c a)
                c
                a))))

(defun count_middle (k l lst)
  (cond((null lst) 0)
    ((and (> (car lst) k) (< (car lst) l)) (+ 1 (count_middle k l (cdr lst))))
    (t (count_middle k l (cdr lst)))
  )
)

(defun collect_middle (k l lst)
    (cond ((null lst) nil)
        ((and (> (car lst) k) (< (car lst) l)) (cons (car lst) (collect_middle k l (cdr lst))))
        (t (collect_middle k l (cdr lst)))
    )
)

(defun find_elt (lst)
    (cond ((null lst) nil)
          ((null (cdr lst)) nil)
          ((< (cadr lst) (car lst)) (cadr lst))
          (t (find_elt (cdr lst)))
    )
)

(defun remove_elt (k lst)
    (cond ((null lst) nil)
        ((= (car lst) k) (remove_elt k (cdr lst)))
        (t (cons (car lst) (remove_elt k (cdr lst))))
    )    
)

(defun insert_elt (k lst)
    (cond ((null lst) (list k))
        ((<= k (car lst)) (cons k lst))
        (t (cons (car lst) (insert_elt k (cdr lst))))
    )
)

(defun fix_elt (lst)
    (let ((elt (find_elt lst)))
        (insert_elt elt (remove_elt elt lst))
    )
)

(defun enter_elts (lst1 lst2)
    (cond ((null lst1) lst2)
        ((null lst2) lst1)
        (t (let ((first1 (car lst1))
                (rest1 (cdr lst1)))
            (enter_elts rest1 (insert_elt first1 lst2))))
    )    
)